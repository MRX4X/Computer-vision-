#PyTorch — это фреймворк для языка программирования Python, предназначенный для машинного обучения.
# Он включает в себя набор инструментов для работы с моделями, используется в обработке естественного языка, 
# компьютерном зрении и других похожих направлениях.


#Тензоры - специальная структура данных, которая очень похожа на массивы и матрицы. 
# В **PyTorch** мы используем тензоры для кодирования входов и выходов модели, также как и для
# параметров модели.




import torch
import numpy as np

#Создание базового тензора
#data = [[1, 2],[3, 4]] #Задаем тензор 
#x_data = torch.tensor(data) #Метод для создания торч тензора
# print(x_data) #Выводим тензор на принт

# x_ones = torch.ones_like(x_data) # сохраняет свойства x_data, метод ones_like - означает представление матрицы в виде только единичек на выводе
# print(f"Ones Tensor: \n {x_ones} \n")

#x_rand = torch.rand_like(x_data, dtype=torch.float) # перезаписывается тип данных x_data, числа будут с плавающей точкой
#print(f"Random Tensor: \n {x_rand} \n")

# shape = (2,3,) #Данный параметр в виде кортежа, передаем параметры длины и ширины
# rand_tensor = torch.rand(shape) #первый тензор будет заполнен рандомными числами, при этом будут использованы заданные пареметры в переменной shape
# ones_tensor = torch.ones(shape) #второй параметр будет заполнен только единичками, при этом будут использованы заданные пареметры в переменной shape
# zeros_tensor = torch.zeros(shape) #третий параметр будет заполнен только нулями, при этом будут использованы заданные пареметры в переменной shape

# print(f"Random Tensor: \n {rand_tensor} \n")
# print(f"Ones Tensor: \n {ones_tensor} \n")
# print(f"Zeros Tensor: \n {zeros_tensor}")

# tensor = torch.rand(3,4) #создание тензора с рандомными значениями, матрицей размерности 3 и 4

# print(f"Shape of tensor: {tensor.shape}") #форма или размерность матрицы, которую имет тензор
# print(f"Datatype of tensor: {tensor.dtype}") #это объект, представляющий тип данных 
# print(f"Device tensor is stored on: {tensor.device}") #это объект, представляющий устройство, на котором torch.Tensor находится или будет назначен. 

#if torch.cuda.is_available():
#   tensor = tensor.to('cuda') #Данной операцией проверяем, возможно ли перемещение вычислительных процессов с CPU (процессора) на GPU (видео-карта), возвращает логическое значение, указывающее, доступна ли в данный момент CUDA

tensor_1 = torch.ones(2, 4) #Создаем два тензора
print(tensor_1)
tensor_2 = torch.zeros(4, 4)
# print('First row: ',tensor[0])
# print('First column: ', tensor[:, 0])
# print('Last column:', tensor[..., -1])
# tensor[:,1] = 0
# print(tensor)

t1 = torch.cat([tensor_1, tensor_2]) #Данная операция, позволяет объединить два тензора в одну, при этом количество столбцов должно быть одинаково, а количество строк может быть разным
print(t1)


#Рассказать про мост в тензорах